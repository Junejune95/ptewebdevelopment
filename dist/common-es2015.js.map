{"version":3,"sources":["./src/app/core/http/detail.service.ts","./src/app/core/http/question.service.ts","./src/app/modules/manage/mock-test/reslovers/full-mock-test.reslover.ts","./src/app/modules/manage/reslovers/other-detail.reslover.ts","./src/app/modules/manage/reslovers/otherQuestion.reslover.ts","./src/app/modules/manage/reslovers/questions-type.reslover.ts","./src/app/shared/models/CommonModel.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '@environments/environment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DetailService {\n\n  private baseUrl = environment.apiUrl + \"/api/v1/\";\n\n  constructor(private http: HttpClient) {\n  }\n\n\n  getDetail(detailUrl: string) {\n    let url = this.baseUrl + detailUrl;\n    return this.http.get<any>(url).pipe(map((obj) => obj || {}));\n  }\n\n  getAllBranch(): Observable<any> {\n    return this.http.get<any>(this.baseUrl + \"branchs\").pipe(map((obj) => obj || []));\n  }\n\n  getdesiredScore(): Observable<any> {\n    return this.http.get<any>(this.baseUrl + \"desired-score\").pipe(map((obj) => obj || []));\n  }\n\n  getAllPackage(): Observable<any> {\n    return this.http.get<any>(this.baseUrl + \"packages\").pipe(map((obj) => obj || []));\n  }\n\n  getHome(): Observable<any> {\n    return this.http.get<any>(this.baseUrl + \"user/home/progress\").pipe(map((obj) => obj || []));\n  }\n\n  getActivePackage(userId:string){\n    return this.http.get<any>(this.baseUrl + `users/${userId}/check-user-limitation`).pipe(map((obj) => obj || {}));\n  }\n\n  getPaymentHistory(){\n    return this.http.get<any>(this.baseUrl + `user/payment/histories`).pipe(map((obj) => obj || {}));\n  }\n\n  getInvoicePdf(url){\n    let headers = new HttpHeaders();\n    headers = headers.set('Accept', 'application/pdf');\n    return this.http.get(url, { headers: headers, responseType: 'blob' });\n  }\n\n\n}","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { CheckProgress } from \"@app/shared/models/check-progress\";\nimport { environment } from \"@environments/environment\";\nimport { shareReplay } from \"rxjs/operators\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class QuestionService {\n    private baseUrl = environment.apiUrl + \"/api/v1\";\n\n    constructor(private http: HttpClient,) { }\n\n    getQuestionProgess(questionUrl: string) {\n        return this.http.get<CheckProgress[]>(`${this.baseUrl}/users/${questionUrl}/check-progress`)\n            .pipe(\n                shareReplay()\n            );\n    }\n\n    getMangeProgess(questionUrl: string) {\n        return this.http.get<CheckProgress[]>(`${this.baseUrl}/users/${questionUrl}/manage-progress`)\n            .pipe(\n                shareReplay()\n            );\n    }\n\n    getPredictionInfo(type:string) {\n        return this.http.get<CheckProgress[]>(`${this.baseUrl}/users/${type}/info`)\n            .pipe(\n                shareReplay()\n            );\n    }\n\n    getStudyPlannInfo() {\n        return this.http.get<CheckProgress[]>(`${this.baseUrl}/users/studyplan/info`)\n            .pipe(\n                shareReplay()\n            );\n    }\n\n}","import { Resolve } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';;\nimport { TableFilter } from '@app/shared/models/table-filter';\nimport { MockTestList } from '@app/shared/models/mock-test-list';\nimport { TableListService } from '@app/core/http/table-list.service';\n\n\n@Injectable()\nexport class FullMockTestResolver implements Resolve<MockTestList> {\n\n    constructor(private service: TableListService) {\n    }\n\n    resolve():\n        Observable<MockTestList> {\n        let filterMaker: TableFilter = {\n            page: 1,\n            limit: 10,\n            sortColumn: 'name',\n            sortDirection: 'desc'\n        };\n\n        return this.service.getMockTestList(filterMaker);\n    }\n}","import { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DetailService } from '@app/core/http/detail.service';\nimport { PredictionDetail } from '@app/shared/models/prediction';\n\n@Injectable()\nexport class OtherDetailResolver implements Resolve<PredictionDetail> {\n\n    constructor(private question: DetailService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot):\n        Observable<PredictionDetail> {\n\n        let detailName = route.data['detailName'];\n        const studyPlanUrl = `${route.params['moduleName'].toLowerCase()}/${detailName}/${route.params['detailId']}`;\n\n        return this.question.getDetail(studyPlanUrl);\n    }\n}","import {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from '@angular/router';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport { QuestionService } from '@app/core/http/question.service';\nimport { CheckProgress } from '@app/shared/models/check-progress';\n\n@Injectable()\nexport class OtherQuestionResolver implements Resolve<CheckProgress[]> {\n\n    constructor(private question: QuestionService) {\n\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n        Observable<CheckProgress[]> {\n            let type=route.params['type'] ? route.params['type'].toLowerCase() : route.data['type'].toLowerCase();\n        return this.question.getPredictionInfo(type);\n    }\n\n}","import {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from '@angular/router';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport { CommonService } from '@app/core/http/common.service';\n\n@Injectable()\nexport class QuestionTypeResolver implements Resolve<[]> {\n\n    constructor(private cservice: CommonService) {\n\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n        Observable<[]> {\n\n        const moduleName = route.paramMap.get(\"moduleName\").toLowerCase();\n\n        return this.cservice.getQuestionTypeListByName(moduleName);\n    }\n}\n\n","export class MockTest{\n    //Common\n    _id: string;\n    name:String;\n    status:String;\n    mcqsingle:questionSub;\n    mcqmultiple:questionSub;\n  \n    //Reading\n    reorder:questionSub;\n    fibdrag:questionSub;\n    fibdrop:questionSub;\n  \n    //Listening\n    dictation: questionSub\n    fillInBlank: questionSub\n    highlightIncorrectWord: questionSub\n    selectMissingWord: questionSub\n    highlightCorrectSummary: questionSub\n    summarizeSpokenText: questionSub\n  }\n  \n  export class questionSub {\n    markDistribution: number;\n    list: [];\n  \n    constructor(mark, list) {\n      this.markDistribution = mark;\n      this.list = list;\n    }\n    static create(mark,list) {\n      return new questionSub(mark, list);\n    }\n  }\n\n  export class PredictionFile{\n    _id: string;\n    name:String;\n    questionType:String;\n    questions:Array<string>;\n  }\n\n  export class User {\n    userId: string;\n    email: string;\n    fullName: string;\n    userType: string;\n    gender: string;\n    password: string;\n    status: string;\n    branch: string;\n    file:any;\n    desiredScore:any;\n    package:any;\n    mobilePhone:any;\n  }\n  "],"sourceRoot":"webpack:///"}