{"version":3,"sources":["src/app/core/http/detail.service.ts","src/app/core/http/question.service.ts","src/app/modules/manage/mock-test/reslovers/full-mock-test.reslover.ts","src/app/modules/manage/reslovers/other-detail.reslover.ts","src/app/modules/manage/reslovers/otherQuestion.reslover.ts","src/app/modules/manage/reslovers/questions-type.reslover.ts","src/app/shared/models/CommonModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '@environments/environment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DetailService {\n\n  private baseUrl = environment.apiUrl + \"/api/v1/\";\n\n  constructor(private http: HttpClient) {\n  }\n\n\n  getDetail(detailUrl: string) {\n    let url = this.baseUrl + detailUrl;\n    return this.http.get<any>(url).pipe(map((obj) => obj || {}));\n  }\n\n  getAllBranch(): Observable<any> {\n    return this.http.get<any>(this.baseUrl + \"branchs\").pipe(map((obj) => obj || []));\n  }\n\n  getdesiredScore(): Observable<any> {\n    return this.http.get<any>(this.baseUrl + \"desired-score\").pipe(map((obj) => obj || []));\n  }\n\n  getAllPackage(): Observable<any> {\n    return this.http.get<any>(this.baseUrl + \"packages\").pipe(map((obj) => obj || []));\n  }\n\n  getHome(): Observable<any> {\n    return this.http.get<any>(this.baseUrl + \"user/home/progress\").pipe(map((obj) => obj || []));\n  }\n\n  getActivePackage(userId:string){\n    return this.http.get<any>(this.baseUrl + `users/${userId}/check-user-limitation`).pipe(map((obj) => obj || {}));\n  }\n\n  getPaymentHistory(){\n    return this.http.get<any>(this.baseUrl + `user/payment/histories`).pipe(map((obj) => obj || {}));\n  }\n\n  getInvoicePdf(url){\n    let headers = new HttpHeaders();\n    headers = headers.set('Accept', 'application/pdf');\n    return this.http.get(url, { headers: headers, responseType: 'blob' });\n  }\n\n\n}","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { CheckProgress } from \"@app/shared/models/check-progress\";\nimport { environment } from \"@environments/environment\";\nimport { shareReplay } from \"rxjs/operators\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class QuestionService {\n    private baseUrl = environment.apiUrl + \"/api/v1\";\n\n    constructor(private http: HttpClient,) { }\n\n    getQuestionProgess(questionUrl: string) {\n        return this.http.get<CheckProgress[]>(`${this.baseUrl}/users/${questionUrl}/check-progress`)\n            .pipe(\n                shareReplay()\n            );\n    }\n\n    getMangeProgess(questionUrl: string) {\n        return this.http.get<CheckProgress[]>(`${this.baseUrl}/users/${questionUrl}/manage-progress`)\n            .pipe(\n                shareReplay()\n            );\n    }\n\n    getPredictionInfo(type:string) {\n        return this.http.get<CheckProgress[]>(`${this.baseUrl}/users/${type}/info`)\n            .pipe(\n                shareReplay()\n            );\n    }\n\n    getStudyPlannInfo() {\n        return this.http.get<CheckProgress[]>(`${this.baseUrl}/users/studyplan/info`)\n            .pipe(\n                shareReplay()\n            );\n    }\n\n}","import { Resolve } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';;\nimport { TableFilter } from '@app/shared/models/table-filter';\nimport { MockTestList } from '@app/shared/models/mock-test-list';\nimport { TableListService } from '@app/core/http/table-list.service';\n\n\n@Injectable()\nexport class FullMockTestResolver implements Resolve<MockTestList> {\n\n    constructor(private service: TableListService) {\n    }\n\n    resolve():\n        Observable<MockTestList> {\n        let filterMaker: TableFilter = {\n            page: 1,\n            limit: 10,\n            sortColumn: 'name',\n            sortDirection: 'desc'\n        };\n\n        return this.service.getMockTestList(filterMaker);\n    }\n}","import { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DetailService } from '@app/core/http/detail.service';\nimport { PredictionDetail } from '@app/shared/models/prediction';\n\n@Injectable()\nexport class OtherDetailResolver implements Resolve<PredictionDetail> {\n\n    constructor(private question: DetailService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot):\n        Observable<PredictionDetail> {\n\n        let detailName = route.data['detailName'];\n        const studyPlanUrl = `${route.params['moduleName'].toLowerCase()}/${detailName}/${route.params['detailId']}`;\n\n        return this.question.getDetail(studyPlanUrl);\n    }\n}","import {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from '@angular/router';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport { QuestionService } from '@app/core/http/question.service';\nimport { CheckProgress } from '@app/shared/models/check-progress';\n\n@Injectable()\nexport class OtherQuestionResolver implements Resolve<CheckProgress[]> {\n\n    constructor(private question: QuestionService) {\n\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n        Observable<CheckProgress[]> {\n            let type=route.params['type'] ? route.params['type'].toLowerCase() : route.data['type'].toLowerCase();\n        return this.question.getPredictionInfo(type);\n    }\n\n}","import {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from '@angular/router';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport { CommonService } from '@app/core/http/common.service';\n\n@Injectable()\nexport class QuestionTypeResolver implements Resolve<[]> {\n\n    constructor(private cservice: CommonService) {\n\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n        Observable<[]> {\n\n        const moduleName = route.paramMap.get(\"moduleName\").toLowerCase();\n\n        return this.cservice.getQuestionTypeListByName(moduleName);\n    }\n}\n\n","export class MockTest{\n    //Common\n    _id: string;\n    name:String;\n    status:String;\n    mcqsingle:questionSub;\n    mcqmultiple:questionSub;\n  \n    //Reading\n    reorder:questionSub;\n    fibdrag:questionSub;\n    fibdrop:questionSub;\n  \n    //Listening\n    dictation: questionSub\n    fillInBlank: questionSub\n    highlightIncorrectWord: questionSub\n    selectMissingWord: questionSub\n    highlightCorrectSummary: questionSub\n    summarizeSpokenText: questionSub\n  }\n  \n  export class questionSub {\n    markDistribution: number;\n    list: [];\n  \n    constructor(mark, list) {\n      this.markDistribution = mark;\n      this.list = list;\n    }\n    static create(mark,list) {\n      return new questionSub(mark, list);\n    }\n  }\n\n  export class PredictionFile{\n    _id: string;\n    name:String;\n    questionType:String;\n    questions:Array<string>;\n  }\n\n  export class User {\n    userId: string;\n    email: string;\n    fullName: string;\n    userType: string;\n    gender: string;\n    password: string;\n    status: string;\n    branch: string;\n    file:any;\n    desiredScore:any;\n    package:any;\n    mobilePhone:any;\n  }\n  "],"sourceRoot":"webpack:///","file":"common-es5.js"}